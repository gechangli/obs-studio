; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DMS"
#define MyAppNameLowerCase LowerCase(MyAppName)
#define MyAppVersion "1.0.0"
#define MyAppPublisher "JRU tech, Inc."
#define MyAppLauncherName "start_all.bat"
#define NumpyZipFile "python-numpy-1.12.1.zip"
#define AppiumZipFile "python-appium-0.24.zip"
#define MatplotZipFile "python-matplotlib-2.0.2.zip"
#define OpenCVZipFile "python-opencv.zip"
#define PythonInstaller "python-2.7.13.amd64.msi"
#define JREZipFile "jre8u131.zip"
#define NoxZipFilePrefix "nox-3.8.2.0"
#define Deflater "7za.exe"
#define NodeJSInstaller "node-v6.10.3-x64.msi"
#define IngoreFiles ".idea,.gitignore"
#define VCRedistFile "vc_redist.x64.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{770C3E35-3748-418A-AB44-5BB61D6ABCDB}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename={#MyAppName}-{#MyAppVersion}-setup
Compression=lzma
SolidCompression=yes
ChangesEnvironment=yes
SetupIconFile=components/icon_128.ico

[Languages]
Name: "English"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "{#Deflater}"; DestDir: "{app}"; Flags: ignoreversion deleteafterinstall
Source: "components/start_*.bat"; DestDir: "{app}"; Flags: ignoreversion
Source: "../../dms/build/libs/{#MyAppNameLowerCase}-{#MyAppVersion}.jar"; DestDir: "{app}/libs"; Flags: ignoreversion
Source: "components\{#JREZipFile}"; DestDir: "{app}"; Flags: ignoreversion deleteafterinstall; AfterInstall: Unzip('{app}\{#JREZipFile}', '{app}')
Source: "components/{#PythonInstaller}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; Check: not IsPythonInstalled; AfterInstall: Install('{tmp}/{#PythonInstaller}')
Source: "components/{#NumpyZipFile}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall
Source: "components/{#AppiumZipFile}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall
Source: "components/{#MatplotZipFile}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall
Source: "components/{#OpenCVZipFile}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; AfterInstall: CheckPythonPackages
Source: "components/{#VCRedistFile}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; Check: not IsVCinstalled; AfterInstall: Install('{tmp}/{#VCRedistFile}') 
Source: "components/{#NodeJSInstaller}"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; Check: not IsNodeJSInstalled; AfterInstall: Install('{tmp}/{#NodeJSInstaller}')
Source: "../../server/node_modules/*"; Excludes: "{#IngoreFiles}"; DestDir: "{app}/appium/node_modules"; Flags: ignoreversion recursesubdirs
Source: "../../snippet/*"; Excludes: "{#IngoreFiles},test_*"; DestDir: "{app}/scripts"; Flags: ignoreversion recursesubdirs
Source: "components/{#NoxZipFilePrefix}.z0*"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall
Source: "components/{#NoxZipFilePrefix}.zip"; DestDir: "{tmp}"; Flags: ignoreversion deleteafterinstall; AfterInstall: Unzip('{tmp}/{#NoxZipFilePrefix}.zip', '{app}')

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppLauncherName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppLauncherName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppLauncherName}"; Tasks: quicklaunchicon

[INI]
Filename: "{app}\application.properties"; Section: "main"; Key: "control.server.url"; String: "Please fill your url"; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "adb.home"; String: "{app}/scripts/UniRobo/tools/win/android/platform-tools"; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "python.home"; String: {code:GetPythonInstallPath}; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "nox.home"; String: "{app}/Nox"; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "appium.script.home"; String: "{app}/scripts"; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "dms.name"; String: "First DMS"; Flags: createkeyifdoesntexist;
Filename: "{app}\application.properties"; Section: "main"; Key: "self.test"; String: "false"; Flags: createkeyifdoesntexist; AfterInstall: ChangeINIToProperties

[Dirs]
Name: "{app}"; Permissions: users-modify
Name: "{app}\Nox"; Permissions: users-modify

[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "ANDROID_HOME"; ValueData: "{app}\scripts\UniRobo\tools\win\android"

[Code]
function IsVCinstalled: Boolean;
// By Michael Weiner <mailto:spam@cogit.net>
// Function for Inno Setup Compiler
// 13 November 2015
// Returns True if Microsoft Visual C++ Redistributable is installed, otherwise False.
// The programmer may set the year of redistributable to find; see below.
var
  names: TArrayOfString;
  i, k, RootKey: Integer;
  dName, key, year: String;
begin
  // get root key
  if IsWin64 then begin
    RootKey := HKLM64;
  end else
    RootKey := HKLM32;

  // Year of redistributable to find; leave null to find installation for any year.
  Result := False;
  key := 'Software\Microsoft\Windows\CurrentVersion\Uninstall';

  // Get an array of all of the uninstall subkey names.
  if RegGetSubkeyNames(RootKey, key, names) then
  begin
    i := 0
    while ((i < GetArrayLength(names)) and (Result = False)) do
    begin
      // For each uninstall subkey, look for a DisplayName value.
      // If not found, then the subkey name will be used instead.
      if not RegQueryStringValue(RootKey, key + '\' + names[i], 'DisplayName', dName) then
        dName := names[i];

      // See if the value contains both of the strings below.
      k := Pos('Visual C++ ', dName);
      if k <> 0 then
      begin
        year := Copy(dName, k + 11, 4);
        if CompareStr(year, '2015') >= 0 then
          Result := True
      end;
      i := i + 1;
    end;
  end;
end;

procedure Unzip(src, target : String);
var
  ResultCode : Integer;
  Params : String;
begin
  Params := 'x -r -aoa -o"' + ExpandConstant(target) + '" "' + ExpandConstant(src) + '"';
  Exec(ExpandConstant('{app}\{#Deflater}'), Params, ExpandConstant('{app}'), SW_SHOW, ewWaitUntilTerminated, ResultCode);
end;

procedure ChangeINIToProperties;
var
  Lines : TArrayOfString;
  FileName : String;
  I : Integer;
begin
  // load properties, it is in ini format
  FileName := ExpandConstant('{app}/application.properties');
  LoadStringsFromFile(FileName, Lines);

  // remove the section line
  Lines[0] := '';

  // change negative slash to positive slash
  for I := 1 to GetArrayLength(Lines) - 1 do
  begin
    StringChangeEx(Lines[I], '\', '/', True);
  end;

  // save back
  SaveStringsToUTF8File(FileName, Lines, False);
end;

function GetNodeJSInstallPath(Dummy : String) : String;
var
  InstallPath : String;
  RootKey : Integer;
begin
  // get root key
  if IsWin64 then begin
    RootKey := HKLM64;
  end else
    RootKey := HKLM32;

  // get install path from registry
  if RegQueryStringValue(RootKey, 'SOFTWARE\Node.js', 'InstallPath', InstallPath) then
  begin
    Result := InstallPath;
  end else
    Result := '';
end;

function IsNodeJSInstalled : Boolean;
var
  InstallPath : String;
begin
  InstallPath := GetNodeJSInstallPath('');
  Result := Length(InstallPath) > 0;
end;

procedure Install(Path : String);
var
  ErrorCode : Integer;
begin
  ShellExec('open', ExpandConstant(Path), '', '', SW_SHOW, ewWaitUntilTerminated, ErrorCode);
end;

function GetPythonInstallPath(Dummy : String) : String;
var
  InstallPath : String;
  RootKey : Integer;
begin
  // get root key
  if IsWin64 then begin
    RootKey := HKLM64;
  end else
    RootKey := HKLM32;

  // get install path from registry
  if RegQueryStringValue(RootKey, 'SOFTWARE\Python\PythonCore\2.7\InstallPath', '', InstallPath) then
  begin
    Result := InstallPath;
  end else
    Result := '';
end;

function IsPythonInstalled : Boolean;
var
  InstallPath : String;
begin
  InstallPath := GetPythonInstallPath('');
  Result := Length(InstallPath) > 0;
end;

procedure CheckPythonPackages;
var
  PythonHome : String;
  PackageHome : String;
  Path : String;
begin
  // get package home dir
  PythonHome := GetPythonInstallPath('');
  PackageHome := PythonHome + '\Lib\site-packages';

  // check numpy
  Path := PackageHome + '\numpy';
  if not DirExists(Path) then
  begin
    Unzip(ExpandConstant('{tmp}/{#NumpyZipFile}'), PackageHome);
  end;

  // check appium
  Path := PackageHome + '\appium';
  if not DirExists(Path) then
  begin
    Unzip(ExpandConstant('{tmp}/{#AppiumZipFile}'), PackageHome);
  end;

  // check matplot
  Path := PackageHome + '\matplotlib';
  if not DirExists(Path) then
  begin
    Unzip(ExpandConstant('{tmp}/{#MatplotZipFile}'), PackageHome);
  end;

  // check opencv
  Path := PackageHome + '\cv2.pyd';
  if not FileExists(Path) then
  begin
    Unzip(ExpandConstant('{tmp}/{#OpenCVZipFile}'), PackageHome);
  end;
end;

function NeedsAddPath(Param: string): boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(
    HKEY_LOCAL_MACHINE,
    'SYSTEM\CurrentControlSet\Control\Session Manager\Environment',
    'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  { look for the path with leading and trailing semicolon }
  { Pos() returns 0 if not found }
  Result :=
    (Pos(';' + UpperCase(ExpandConstant(Param)) + ';', ';' + UpperCase(OrigPath) + ';') = 0) and
    (Pos(';' + UpperCase(ExpandConstant(Param)) + '\;', ';' + UpperCase(OrigPath) + ';') = 0); 
end;